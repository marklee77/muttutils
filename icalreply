#!/usr/bin/python
#FIXME: update PRODID, delete description, organizer email
#FIXME: multiple emails
import vobject
from argparse import ArgumentParser
from os.path import isfile
from sys import stdin, stdout

parser = ArgumentParser(description="Generate a replay to an iCal Invitation.")
parser.add_argument('-e', '--email', action='append', default=[], help='attendee email') 
parser.add_argument('-i', '--invite', default='-', 
                    help='invitation .ics file or - (for stdin)')
parser.add_argument('-o', '--output',
                    help='output file or - (for stdout)')
parser.add_argument('-s', '--sendmail', help='optional path to sendmail for replies')
parser.add_argument('-r', '--response', 
                    choices=['accepted', 'declined', 'tentative'],
                    default='accepted', help='invitation response')

args = parser.parse_args()

if not len(args.email):
    raise SystemExit("error: can't send response without attendee email!")

addrs = args.email

infile = None
if args.invite == "-":
    infile = stdin
elif isfile(args.invite):
    infile = open(args.invite, 'r')
else:
    raise SystemExit("must specify valid invitation file or stdin")

outfile = None

if args.output:
    if args.output == "-":
        outfile = stdout
    elif isfile(args.output):
        outfile = open(args.output, 'w')
    else:
        raise SystemExit("must specify valid output file or stdout")
elif not args.sendmail:
    outfile = stdout

response = args.response

invite = vobject.readOne(infile.read())

# FIXME: maybe we should create our own new event?
invite.method.value = u'REPLY'
invite.prodid.value = u'icalreply'

# FIXME: assuming properly formatted invite containing one event...
del invite.vevent.description
attendee_list = invite.vevent.attendee_list

i = 0
found_addrs = set()
while i < len(attendee_list):
    attendee_addr = attendee_list[i].value.lower()
    if attendee_addr.startswith('mailto:'):
        attendee_addr = attendee_addr[7:]
    if attendee_addr in addrs:
        found_addrs.add(attendee_addr)
        attendee_list[i].params[u'PARTSTAT'][0] = response.upper()
        del attendee_list[i].params[u'RSVP']
        i += 1
    else:
        del attendee_list[i]

if i == 0:
    raise SystemExit("attendee email address not found")

if outfile:
    outfile.write(invite.serialize())
    outfile.close()

if args.sendmail:
    from email.mime.text import MIMEText
    from re import sub
    from subprocess import Popen, PIPE
    msg = MIMEText(invite.serialize(), 'calendar')
    msg['Subject'] = 'Event Invitation Reply (' + response.title() + '): ' + invite.vevent.summary.value
    msg['To'] = invite.vevent.organizer.value[7:]
    for addr in found_addrs:
        msg['From'] = addr
        smcmd = sub('%f', addr, args.sendmail).split(" ")
        smproc = Popen(smcmd, stdin=PIPE, stdout=stdout)
        smproc.communicate(msg.as_string())


#!/usr/bin/python
#FIXME: update PRODID, delete description, organizer email
#FIXME: multiple emails
import vobject
from argparse import ArgumentParser
from os.path import isfile
from sys import stdin, stdout

parser = ArgumentParser(description="Generate a replay to an iCal Invitation.")
parser.add_argument('-e', '--email', action='append', default=[], help='attendee email') 
parser.add_argument('-i', '--invite', default='-', 
                    help='invitation .ics file or - (for stdin)')
parser.add_argument('-o', '--output', default='-',
                    help='output file or - (for stdout)')
parser.add_argument('-f', '--format', choices=['ics', 'email'], default='ics', 
                    help='output format')
parser.add_argument('-r', '--response', 
                    choices=['accepted', 'declined', 'tentative'],
                    default='accepted', help='invitation response')

args = parser.parse_args()

if not len(args.email):
    raise SystemExit("error: can't send response without attendee email!")

emails = args.email

infile = None
if args.invite == "-":
    infile = stdin
elif isfile(args.invite):
    infile = open(args.invite, 'r')
else:
    raise SystemExit("must specify valid invitation file or stdin")

outfile = None
if args.output == "-":
    outfile = stdout
elif isfile(args.output):
    outfile = open(args.output, 'w')
else:
    raise SystemExit("must specify valid output file or stdout")

invite = vobject.readOne(infile.read())

# FIXME: maybe we should create our own new event?
invite.method.value = u'REPLY'
invite.prodid.value = u'icalreply'

# FIXME: assuming properly formatted invite containing one event...
del invite.vevent.description
attendee_list = invite.vevent.attendee_list

# FIXME: use addr instead of email?
i = 0
found_addrs = set()
while i < len(attendee_list):
    attendee_email = attendee_list[i].value.lower()
    if attendee_email.startswith('mailto:'):
        attendee_email = attendee_email[7:]
    if attendee_email in emails:
        found_addrs.add(attendee_email)
        attendee_list[i].params[u'PARTSTAT'][0] = u'ACCEPTED'
        del attendee_list[i].params[u'RSVP']
        i += 1
    else:
        del attendee_list[i]

if i == 0:
    raise SystemExit("attendee email not found")

if args.format == 'ics':
    outfile.write(invite.serialize())
elif args.format == 'email':
    from email.mime.text import MIMEText
    msg = MIMEText(invite.serialize(), 'calendar')
    msg['Subject'] = 'FIXME'
    msg['To'] = invite.vevent.organizer.value[7:]
    for addr in found_addrs:
        msg['From'] = addr
        outfile.write(msg.as_string())

outfile.close()
